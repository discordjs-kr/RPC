{
  "meta": { "generator": "0.8.0", "format": 19, "date": 1545319592211 },
  "custom": {
    "general": {
      "name": "General",
      "files": {
        "welcome": {
          "name": "Welcome",
          "type": "md",
          "content": "<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord-rpc\"><img src=\"https://img.shields.io/npm/v/discord-rpc.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord-rpc\"><img src=\"https://img.shields.io/npm/dt/discord-rpc.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://david-dm.org/discordjs/RPC\"><img src=\"https://img.shields.io/david/discordjs/RPC.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/devsnek\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord-rpc/\"><img src=\"https://nodei.co/npm/discord-rpc.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Discord.js RPC 확장프로그램\n\n### [문서](https://discord-kr.js.org/#/docs/rpc/)\n\n### [Rich Presence 예시](https://github.com/discordjs/RPC/blob/master/example)\n\n### __브라우저__ 예시\n\n```javascript\nconst clientId = '187406016902594560';\nconst scopes = ['rpc', 'rpc.api', 'messages.read'];\n\nconst client = new RPC.Client({ transport: 'websocket' });\n\nclient.on('ready', () => {\n  console.log(client.application.name, '로 로그인 됨');\n  console.log('사용자:' client.user.username);\n\n  client.selectVoiceChannel('81384788862181376');\n});\n\n// 클라이언트 ID로 RPC에 로그인합니다.\nclient.login({ clientId, scopes });\n```\n",
          "path": "README.md"
        }
      }
    }
  },
  "classes": [
    {
      "name": "RPCClient",
      "description": "Discord RPC와 상호 작용하는 주요 허브입니다.",
      "extends": ["BaseClient"],
      "construct": {
        "name": "RPCClient",
        "params": [
          {
            "name": "options",
            "description": "클라이언트 옵션\ntransport를 제공해야합니다.",
            "optional": true,
            "type": [[["RPCClientOptions"]]]
          }
        ]
      },
      "props": [
        {
          "name": "application",
          "description": "클라이언트에 사용된 애플리케이션",
          "nullable": true,
          "type": [[["ClientApplication"]]],
          "meta": { "line": 41, "file": "client.js", "path": "src" }
        },
        {
          "name": "user",
          "description": "이 애플리케이션에 사용된 사용자",
          "nullable": true,
          "type": [[["User"]]],
          "meta": { "line": 47, "file": "client.js", "path": "src" }
        },
        {
          "name": "transport",
          "description": "Raw transport userd",
          "access": "private",
          "type": [[["RPCTransport"]]],
          "meta": { "line": 70, "file": "client.js", "path": "src" }
        },
        {
          "name": "_expecting",
          "description": "Map of nonces being expected from the transport",
          "access": "private",
          "type": [[["Map"]]],
          "meta": { "line": 78, "file": "client.js", "path": "src" }
        },
        {
          "name": "_subscriptions",
          "description": "Map of current subscriptions",
          "access": "private",
          "type": [[["Map"]]],
          "meta": { "line": 85, "file": "client.js", "path": "src" }
        }
      ],
      "methods": [
        {
          "name": "connect",
          "description": "RPC를 검색하여 연결합니다.",
          "meta": { "line": 93, "file": "client.js", "path": "src" }
        },
        {
          "name": "login",
          "description": "인증 플로우를 수행합니다. 필요한 경우 자동으로 Client#connect를 호출합니다.",
          "examples": [
            "client.login({ clientId: '1234567', clientSecret: 'abcdef123' });"
          ],
          "params": [
            {
              "name": "options",
              "description": "인증 옵션\n로그인을 수행하려면 하나 이상의 속성을 제공해야 합니다.",
              "type": [[["RPCLoginOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["RPCClient", ">"]
            ]
          ],
          "meta": { "line": 128, "file": "client.js", "path": "src" }
        },
        {
          "name": "request",
          "description": "Request",
          "access": "private",
          "params": [
            { "name": "cmd", "description": "Command", "type": [[["string"]]] },
            {
              "name": "args",
              "description": "Arguments",
              "optional": true,
              "default": "{}",
              "type": [[["Object"]]]
            },
            {
              "name": "evt",
              "description": "Event",
              "optional": true,
              "type": [[["string"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 149, "file": "client.js", "path": "src" }
        },
        {
          "name": "_onRpcMessage",
          "description": "Message handler",
          "access": "private",
          "params": [
            {
              "name": "message",
              "description": "message",
              "type": [[["Object"]]]
            }
          ],
          "meta": { "line": 162, "file": "client.js", "path": "src" }
        },
        {
          "name": "authorize",
          "description": "Authorize",
          "access": "private",
          "params": [
            {
              "name": "options",
              "description": "options",
              "type": [[["Object"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 194, "file": "client.js", "path": "src" }
        },
        {
          "name": "authenticate",
          "description": "Authenticate",
          "access": "private",
          "params": [
            {
              "name": "accessToken",
              "description": "access token",
              "type": [[["string"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 230, "file": "client.js", "path": "src" }
        },
        {
          "name": "getGuild",
          "description": "길드를 가져옵니다.",
          "params": [
            {
              "name": "id",
              "description": "길드 ID",
              "type": [[["Snowflake"]]]
            },
            {
              "name": "timeout",
              "description": "Timeout 요청",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["Guild", ">"]
            ]
          ],
          "meta": { "line": 248, "file": "client.js", "path": "src" }
        },
        {
          "name": "getGuilds",
          "description": "모든 길드를 불러옵니다.",
          "params": [
            {
              "name": "timeout",
              "description": "Timeout 요청",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["Collection", "<"],
              ["Snowflake", ", "],
              ["Guild", ">>"]
            ]
          ],
          "meta": { "line": 257, "file": "client.js", "path": "src" }
        },
        {
          "name": "getChannel",
          "description": "채널을 가져옵니다.",
          "params": [
            {
              "name": "id",
              "description": "Channel ID",
              "type": [[["Snowflake"]]]
            },
            {
              "name": "timeout",
              "description": "Timeout 요청",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["Channel", ">"]
            ]
          ],
          "meta": { "line": 267, "file": "client.js", "path": "src" }
        },
        {
          "name": "getChannels",
          "description": "모든 채널을 가져옵니다",
          "params": [
            {
              "name": "id",
              "description": "길드 ID",
              "optional": true,
              "type": [[["Snowflake"]]]
            },
            {
              "name": "timeout",
              "description": "Timeout 요청",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["Collection", "<"],
              ["Snowflake", ", "],
              ["Channel", ">>"]
            ]
          ],
          "meta": { "line": 277, "file": "client.js", "path": "src" }
        },
        {
          "name": "setCertifiedDevices",
          "description": "어떤 장치가 인증되었는지 디스코드에 표시합니다.",
          "params": [
            {
              "name": "devices",
              "description": "디스코드에 전송할 인증된 장치",
              "type": [
                [
                  ["Array", "<"],
                  ["CertifiedDevice", ">"]
                ]
              ]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 307, "file": "client.js", "path": "src" }
        },
        {
          "name": "setUserVoiceSettings",
          "description": "사용자의 음성 설정을 ID별로 설정합니다.",
          "params": [
            {
              "name": "id",
              "description": "설정할 사용자의 ID",
              "type": [[["Snowflake"]]]
            },
            {
              "name": "settings",
              "description": "설정",
              "type": [[["UserVoiceSettings"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 338, "file": "client.js", "path": "src" }
        },
        {
          "name": "selectVoiceChannel",
          "description": "유저를 음성 채널로 옮깁니다.",
          "params": [
            {
              "name": "id",
              "description": "음성채널 ID",
              "type": [[["Snowflake"]]]
            },
            {
              "name": "options",
              "description": "옵션",
              "optional": true,
              "type": [[["Object"]]]
            },
            {
              "name": "options.timeout",
              "description": "명령어의 Timeout",
              "optional": true,
              "type": [[["number"]]]
            },
            {
              "name": "options.force",
              "description": "강제로 옮깁니다.\n이 작업은 사용자의 명시적 사용 권한이 없는 경우에만 수행해야 합니다.",
              "optional": true,
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 356, "file": "client.js", "path": "src" }
        },
        {
          "name": "selectTextChannel",
          "description": "유저를 텍스트 채널로 옮깁니다.",
          "params": [
            {
              "name": "id",
              "description": "음성채널 ID",
              "type": [[["Snowflake"]]]
            },
            {
              "name": "options",
              "description": "옵션",
              "optional": true,
              "type": [[["Object"]]]
            },
            {
              "name": "options.timeout",
              "description": "명령어의 Timeout",
              "optional": true,
              "type": [[["number"]]]
            },
            {
              "name": "options.force",
              "description": "강제로 옮깁니다.\n이 작업은 사용자의 명시적 사용 권한이 없는 경우에만 수행해야 합니다.",
              "optional": true,
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 369, "file": "client.js", "path": "src" }
        },
        {
          "name": "getVoiceSettings",
          "description": "현재 음성 설정",
          "returns": [[["Promise"]]],
          "meta": { "line": 377, "file": "client.js", "path": "src" }
        },
        {
          "name": "setVoiceSettings",
          "description": "현재 음성 설정을 설정하고 이 세션의 연결이 끊어질 때까지 현재 설정을 재연결합니다.\n연결될 수 있는 다른 모든 rpc 세션에 대한 설정도 잠급니다.",
          "params": [
            {
              "name": "args",
              "description": "설정",
              "type": [[["Object"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 413, "file": "client.js", "path": "src" }
        },
        {
          "name": "captureShortcut",
          "description": "클라이언트를 사용하여 숏컷을 캡처합니다. \n콜백(key, stop)은 캡처를 중지하는 기능입니다.연결을 끊기 전에 \n이 \"Stop\" 기능을 호출해야 합니다. 그렇지 않으면 사용자가 클라이언트를 재시작할 수 있습니다.",
          "params": [
            {
              "name": "callback",
              "description": "콜백 핸들링 키",
              "type": [[["function"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["function", "()>"]
            ]
          ],
          "meta": { "line": 448, "file": "client.js", "path": "src" }
        },
        {
          "name": "setActivity",
          "description": "로그인된 유저의 프리센스를 설정합니다.",
          "params": [
            {
              "name": "args",
              "description": "The rich presence to pass.",
              "type": [[["object"]]]
            },
            {
              "name": "pid",
              "description": "애플리케이션의 프로세스 ID. 실행 프로세스의 PID로 기본 설정됩니다.",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 467, "file": "client.js", "path": "src" }
        },
        {
          "name": "clearActivity",
          "description": "현재 프리센스를 초기화합니다. (존재하는 경우) 이것은 사용자 이름 아래 \"X 플레이중\" 메세지가 숨겨집니다.",
          "params": [
            {
              "name": "pid",
              "description": "애플리케이션의 프로세스 ID. 실행 프로세스의 PID로 기본 설정됩니다.",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 535, "file": "client.js", "path": "src" }
        },
        {
          "name": "sendJoinInvite",
          "description": "RPC 사용자가 현재 플레이 중인 게임에 사용자를 초대합니다.",
          "params": [
            {
              "name": "user",
              "description": "초대할 사용자",
              "type": [[["User"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 546, "file": "client.js", "path": "src" }
        },
        {
          "name": "sendJoinRequest",
          "description": "사용자가 플레이중인 게임에 참여하도록 요청합니다.",
          "params": [
            {
              "name": "user",
              "description": "게임 참여를 요청할 사용자",
              "type": [[["User"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 557, "file": "client.js", "path": "src" }
        },
        {
          "name": "closeJoinRequest",
          "description": "사용자로부터 참여 요청을 거부합니다.",
          "params": [
            {
              "name": "user",
              "description": "참여 요청을 취소하고 싶은 유저",
              "type": [[["User"]]]
            }
          ],
          "returns": [[["Promise"]]],
          "meta": { "line": 568, "file": "client.js", "path": "src" }
        },
        {
          "name": "subscribe",
          "description": "이벤트에 구독합니다.",
          "params": [
            {
              "name": "event",
              "description": "이벤트 이름 예) `MESSAGE_CREATE`",
              "type": [[["string"]]]
            },
            {
              "name": "args",
              "description": "이벤트의 인수 예). `{ channel_id: '1234' }`",
              "optional": true,
              "type": [[["Object"]]]
            },
            {
              "name": "callback",
              "description": "구독한 이벤트가 트리거될 때 다시 콜백합니다.",
              "type": [[["function"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["Object", ">"]
            ]
          ],
          "meta": { "line": 633, "file": "client.js", "path": "src" }
        },
        {
          "name": "destroy",
          "description": "클라이언트를 파괴합니다.",
          "meta": { "line": 651, "file": "client.js", "path": "src" }
        }
      ],
      "meta": { "line": 24, "file": "client.js", "path": "src" }
    }
  ],
  "interfaces": [],
  "typedefs": [],
  "externals": []
}
